/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HighgeekNet.OpenApi.LuckPermsApi.Client;
using HighgeekNet.OpenApi.LuckPermsApi.Model;

namespace HighgeekNet.OpenApi.LuckPermsApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a node to a group
        /// </summary>
        /// <remarks>
        /// Add a single node to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        List<Node> AddGroupNode(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0);

        /// <summary>
        /// Add a node to a group
        /// </summary>
        /// <remarks>
        /// Add a single node to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        ApiResponse<List<Node>> AddGroupNodeWithHttpInfo(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0);
        /// <summary>
        /// Add multiple Group Nodes
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        List<Node> AddGroupNodes(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);

        /// <summary>
        /// Add multiple Group Nodes
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        ApiResponse<List<Node>> AddGroupNodesWithHttpInfo(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);
        /// <summary>
        /// Remove nodes from a group
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ClearGroupNodes(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);

        /// <summary>
        /// Remove nodes from a group
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearGroupNodesWithHttpInfo(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);
        /// <summary>
        /// Create a new group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group CreateGroup(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0);

        /// <summary>
        /// Create a new group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> CreateGroupWithHttpInfo(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0);
        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// Delete a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteGroup(string groupName, int operationIndex = 0);

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// Delete a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo(string groupName, int operationIndex = 0);
        /// <summary>
        /// Get a groups data
        /// </summary>
        /// <remarks>
        /// Get a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group GetGroup(string groupName, int operationIndex = 0);

        /// <summary>
        /// Get a groups data
        /// </summary>
        /// <remarks>
        /// Get a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetGroupWithHttpInfo(string groupName, int operationIndex = 0);
        /// <summary>
        /// Get a groups metadata
        /// </summary>
        /// <remarks>
        /// Get the groups metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Metadata</returns>
        Metadata GetGroupMeta(string groupName, int operationIndex = 0);

        /// <summary>
        /// Get a groups metadata
        /// </summary>
        /// <remarks>
        /// Get the groups metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Metadata</returns>
        ApiResponse<Metadata> GetGroupMetaWithHttpInfo(string groupName, int operationIndex = 0);
        /// <summary>
        /// Get a groups nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a groups nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        List<Node> GetGroupNodes(string groupName, int operationIndex = 0);

        /// <summary>
        /// Get a groups nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a groups nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        ApiResponse<List<Node>> GetGroupNodesWithHttpInfo(string groupName, int operationIndex = 0);
        /// <summary>
        /// Run a permission check against a group
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        PermissionCheckResult GetGroupPermissionCheck(string groupName, string permission, int operationIndex = 0);

        /// <summary>
        /// Run a permission check against a group
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        ApiResponse<PermissionCheckResult> GetGroupPermissionCheckWithHttpInfo(string groupName, string permission, int operationIndex = 0);
        /// <summary>
        /// Search for groups with given nodes
        /// </summary>
        /// <remarks>
        /// Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupSearchResult&gt;</returns>
        List<GroupSearchResult> GetGroupSearch(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for groups with given nodes
        /// </summary>
        /// <remarks>
        /// Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupSearchResult&gt;</returns>
        ApiResponse<List<GroupSearchResult>> GetGroupSearchWithHttpInfo(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get all existing groups
        /// </summary>
        /// <remarks>
        /// Get all known groups
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetGroups(int operationIndex = 0);

        /// <summary>
        /// Get all existing groups
        /// </summary>
        /// <remarks>
        /// Get all known groups
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetGroupsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Run a permission check against a group with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        PermissionCheckResult PostGroupPermissionCheck(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0);

        /// <summary>
        /// Run a permission check against a group with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        ApiResponse<PermissionCheckResult> PostGroupPermissionCheckWithHttpInfo(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0);
        /// <summary>
        /// Replace (set) a groups nodes
        /// </summary>
        /// <remarks>
        /// Override the groups nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SetGroupNodes(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);

        /// <summary>
        /// Replace (set) a groups nodes
        /// </summary>
        /// <remarks>
        /// Override the groups nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetGroupNodesWithHttpInfo(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a node to a group
        /// </summary>
        /// <remarks>
        /// Add a single node to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        System.Threading.Tasks.Task<List<Node>> AddGroupNodeAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a node to a group
        /// </summary>
        /// <remarks>
        /// Add a single node to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Node>>> AddGroupNodeWithHttpInfoAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add multiple Group Nodes
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        System.Threading.Tasks.Task<List<Node>> AddGroupNodesAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add multiple Group Nodes
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Node>>> AddGroupNodesWithHttpInfoAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove nodes from a group
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearGroupNodesAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove nodes from a group
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearGroupNodesWithHttpInfoAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> CreateGroupAsync(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> CreateGroupWithHttpInfoAsync(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// Delete a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// Delete a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a groups data
        /// </summary>
        /// <remarks>
        /// Get a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetGroupAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a groups data
        /// </summary>
        /// <remarks>
        /// Get a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a groups metadata
        /// </summary>
        /// <remarks>
        /// Get the groups metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Metadata</returns>
        System.Threading.Tasks.Task<Metadata> GetGroupMetaAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a groups metadata
        /// </summary>
        /// <remarks>
        /// Get the groups metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Metadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<Metadata>> GetGroupMetaWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a groups nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a groups nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        System.Threading.Tasks.Task<List<Node>> GetGroupNodesAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a groups nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a groups nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Node>>> GetGroupNodesWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Run a permission check against a group
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        System.Threading.Tasks.Task<PermissionCheckResult> GetGroupPermissionCheckAsync(string groupName, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Run a permission check against a group
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCheckResult>> GetGroupPermissionCheckWithHttpInfoAsync(string groupName, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search for groups with given nodes
        /// </summary>
        /// <remarks>
        /// Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<GroupSearchResult>> GetGroupSearchAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search for groups with given nodes
        /// </summary>
        /// <remarks>
        /// Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupSearchResult>>> GetGroupSearchWithHttpInfoAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get all existing groups
        /// </summary>
        /// <remarks>
        /// Get all known groups
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetGroupsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get all existing groups
        /// </summary>
        /// <remarks>
        /// Get all known groups
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetGroupsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Run a permission check against a group with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        System.Threading.Tasks.Task<PermissionCheckResult> PostGroupPermissionCheckAsync(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Run a permission check against a group with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a group with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCheckResult>> PostGroupPermissionCheckWithHttpInfoAsync(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Replace (set) a groups nodes
        /// </summary>
        /// <remarks>
        /// Override the groups nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetGroupNodesAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Replace (set) a groups nodes
        /// </summary>
        /// <remarks>
        /// Override the groups nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetGroupNodesWithHttpInfoAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(string basePath)
        {
            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                new HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupsApi(HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient client, HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient asyncClient, HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a node to a group Add a single node to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        public List<Node> AddGroupNode(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = AddGroupNodeWithHttpInfo(groupName, temporaryNodeMergeStrategy, newNode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a node to a group Add a single node to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> AddGroupNodeWithHttpInfo(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->AddGroupNode");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Node>>("/group/{name}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a node to a group Add a single node to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        public async System.Threading.Tasks.Task<List<Node>> AddGroupNodeAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = await AddGroupNodeWithHttpInfoAsync(groupName, temporaryNodeMergeStrategy, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a node to a group Add a single node to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>>> AddGroupNodeWithHttpInfoAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->AddGroupNode");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Node>>("/group/{name}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add multiple Group Nodes Add multiple nodes to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        public List<Node> AddGroupNodes(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = AddGroupNodesWithHttpInfo(groupName, temporaryNodeMergeStrategy, newNode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add multiple Group Nodes Add multiple nodes to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> AddGroupNodesWithHttpInfo(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->AddGroupNodes");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<Node>>("/group/{name}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add multiple Group Nodes Add multiple nodes to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        public async System.Threading.Tasks.Task<List<Node>> AddGroupNodesAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = await AddGroupNodesWithHttpInfoAsync(groupName, temporaryNodeMergeStrategy, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add multiple Group Nodes Add multiple nodes to the group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>>> AddGroupNodesWithHttpInfoAsync(string groupName, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->AddGroupNodes");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.AddGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<List<Node>>("/group/{name}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove nodes from a group Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ClearGroupNodes(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            ClearGroupNodesWithHttpInfo(groupName, newNode);
        }

        /// <summary>
        /// Remove nodes from a group Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> ClearGroupNodesWithHttpInfo(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ClearGroupNodes");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.ClearGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/group/{name}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove nodes from a group Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearGroupNodesAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ClearGroupNodesWithHttpInfoAsync(groupName, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove nodes from a group Delete some or all of the nodes from a group.  If the request body is empty, all nodes will be deleted.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> ClearGroupNodesWithHttpInfoAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ClearGroupNodes");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.ClearGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/group/{name}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new group Create a new group.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group CreateGroup(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group> localVarResponse = CreateGroupWithHttpInfo(newGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group Create a new group.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group> CreateGroupWithHttpInfo(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newGroup;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Group>("/group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new group Create a new group.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> CreateGroupAsync(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group> localVarResponse = await CreateGroupWithHttpInfoAsync(newGroup, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group Create a new group.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newGroup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group>> CreateGroupWithHttpInfoAsync(NewGroup? newGroup = default(NewGroup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newGroup;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Group>("/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a group Delete a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteGroup(string groupName, int operationIndex = 0)
        {
            DeleteGroupWithHttpInfo(groupName);
        }

        /// <summary>
        /// Delete a group Delete a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> DeleteGroupWithHttpInfo(string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteGroup");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/group/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a group Delete a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteGroupWithHttpInfoAsync(groupName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a group Delete a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteGroup");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/group/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a groups data Get a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group GetGroup(string groupName, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group> localVarResponse = GetGroupWithHttpInfo(groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a groups data Get a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group> GetGroupWithHttpInfo(string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroup");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Group>("/group/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a groups data Get a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetGroupAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group> localVarResponse = await GetGroupWithHttpInfoAsync(groupName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a groups data Get a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Group>> GetGroupWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroup");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/group/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a groups metadata Get the groups metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Metadata</returns>
        public Metadata GetGroupMeta(string groupName, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata> localVarResponse = GetGroupMetaWithHttpInfo(groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a groups metadata Get the groups metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Metadata</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata> GetGroupMetaWithHttpInfo(string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupMeta");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupMeta";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Metadata>("/group/{name}/meta", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMeta", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a groups metadata Get the groups metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Metadata</returns>
        public async System.Threading.Tasks.Task<Metadata> GetGroupMetaAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata> localVarResponse = await GetGroupMetaWithHttpInfoAsync(groupName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a groups metadata Get the groups metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Metadata)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata>> GetGroupMetaWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupMeta");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupMeta";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Metadata>("/group/{name}/meta", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMeta", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a groups nodes (permissions data) Get a groups nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        public List<Node> GetGroupNodes(string groupName, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = GetGroupNodesWithHttpInfo(groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a groups nodes (permissions data) Get a groups nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> GetGroupNodesWithHttpInfo(string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupNodes");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Node>>("/group/{name}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a groups nodes (permissions data) Get a groups nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        public async System.Threading.Tasks.Task<List<Node>> GetGroupNodesAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = await GetGroupNodesWithHttpInfoAsync(groupName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a groups nodes (permissions data) Get a groups nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>>> GetGroupNodesWithHttpInfoAsync(string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupNodes");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Node>>("/group/{name}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a group Run a permission check against a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        public PermissionCheckResult GetGroupPermissionCheck(string groupName, string permission, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = GetGroupPermissionCheckWithHttpInfo(groupName, permission);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a group Run a permission check against a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> GetGroupPermissionCheckWithHttpInfo(string groupName, string permission, int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupPermissionCheck");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'permission' when calling GroupsApi->GetGroupPermissionCheck");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));

            localVarRequestOptions.Operation = "GroupsApi.GetGroupPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PermissionCheckResult>("/group/{name}/permission-check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a group Run a permission check against a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        public async System.Threading.Tasks.Task<PermissionCheckResult> GetGroupPermissionCheckAsync(string groupName, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = await GetGroupPermissionCheckWithHttpInfoAsync(groupName, permission, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a group Run a permission check against a group
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult>> GetGroupPermissionCheckWithHttpInfoAsync(string groupName, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupPermissionCheck");
            }

            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'permission' when calling GroupsApi->GetGroupPermissionCheck");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));

            localVarRequestOptions.Operation = "GroupsApi.GetGroupPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PermissionCheckResult>("/group/{name}/permission-check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for groups with given nodes Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupSearchResult&gt;</returns>
        public List<GroupSearchResult> GetGroupSearch(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GroupSearchResult>> localVarResponse = GetGroupSearchWithHttpInfo(key, keyStartsWith, metaKey, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for groups with given nodes Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupSearchResult&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GroupSearchResult>> GetGroupSearchWithHttpInfo(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyStartsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "keyStartsWith", keyStartsWith));
            }
            if (metaKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "metaKey", metaKey));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupSearchResult>>("/group/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for groups with given nodes Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupSearchResult>> GetGroupSearchAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GroupSearchResult>> localVarResponse = await GetGroupSearchWithHttpInfoAsync(key, keyStartsWith, metaKey, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for groups with given nodes Search for groups with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GroupSearchResult>>> GetGroupSearchWithHttpInfoAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyStartsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "keyStartsWith", keyStartsWith));
            }
            if (metaKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "metaKey", metaKey));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupSearchResult>>("/group/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all existing groups Get all known groups
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetGroups(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>> localVarResponse = GetGroupsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all existing groups Get all known groups
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>> GetGroupsWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GetGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all existing groups Get all known groups
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetGroupsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>> localVarResponse = await GetGroupsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all existing groups Get all known groups
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>>> GetGroupsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GetGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a group with custom query options Run a permission check against a group with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        public PermissionCheckResult PostGroupPermissionCheck(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = PostGroupPermissionCheckWithHttpInfo(groupName, permissionCheckRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a group with custom query options Run a permission check against a group with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> PostGroupPermissionCheckWithHttpInfo(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->PostGroupPermissionCheck");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = permissionCheckRequest;

            localVarRequestOptions.Operation = "GroupsApi.PostGroupPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PermissionCheckResult>("/group/{name}/permission-check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGroupPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a group with custom query options Run a permission check against a group with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        public async System.Threading.Tasks.Task<PermissionCheckResult> PostGroupPermissionCheckAsync(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = await PostGroupPermissionCheckWithHttpInfoAsync(groupName, permissionCheckRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a group with custom query options Run a permission check against a group with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult>> PostGroupPermissionCheckWithHttpInfoAsync(string groupName, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->PostGroupPermissionCheck");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = permissionCheckRequest;

            localVarRequestOptions.Operation = "GroupsApi.PostGroupPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PermissionCheckResult>("/group/{name}/permission-check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGroupPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace (set) a groups nodes Override the groups nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SetGroupNodes(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            SetGroupNodesWithHttpInfo(groupName, newNode);
        }

        /// <summary>
        /// Replace (set) a groups nodes Override the groups nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> SetGroupNodesWithHttpInfo(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->SetGroupNodes");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.SetGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/group/{name}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace (set) a groups nodes Override the groups nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetGroupNodesAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetGroupNodesWithHttpInfoAsync(groupName, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Replace (set) a groups nodes Override the groups nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">A group name</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> SetGroupNodesWithHttpInfoAsync(string groupName, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->SetGroupNodes");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "GroupsApi.SetGroupNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/group/{name}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetGroupNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
