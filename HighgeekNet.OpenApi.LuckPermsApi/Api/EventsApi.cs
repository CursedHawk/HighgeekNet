/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HighgeekNet.OpenApi.LuckPermsApi.Client;
using HighgeekNet.OpenApi.LuckPermsApi.Model;

namespace HighgeekNet.OpenApi.LuckPermsApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventCustomMessageReceive200ResponseInner&gt;</returns>
        List<GetEventCustomMessageReceive200ResponseInner> GetEventCustomMessageReceive(int operationIndex = 0);

        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventCustomMessageReceive200ResponseInner&gt;</returns>
        ApiResponse<List<GetEventCustomMessageReceive200ResponseInner>> GetEventCustomMessageReceiveWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Subscribe to the LogBroadcastEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventLogBroadcast200ResponseInner&gt;</returns>
        List<GetEventLogBroadcast200ResponseInner> GetEventLogBroadcast(int operationIndex = 0);

        /// <summary>
        /// Subscribe to the LogBroadcastEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventLogBroadcast200ResponseInner&gt;</returns>
        ApiResponse<List<GetEventLogBroadcast200ResponseInner>> GetEventLogBroadcastWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPostNetworkSync200ResponseInner&gt;</returns>
        List<GetEventPostNetworkSync200ResponseInner> GetEventPostNetworkSync(int operationIndex = 0);

        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPostNetworkSync200ResponseInner&gt;</returns>
        ApiResponse<List<GetEventPostNetworkSync200ResponseInner>> GetEventPostNetworkSyncWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Subscribe to the PostSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPostSync200ResponseInner&gt;</returns>
        List<GetEventPostSync200ResponseInner> GetEventPostSync(int operationIndex = 0);

        /// <summary>
        /// Subscribe to the PostSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPostSync200ResponseInner&gt;</returns>
        ApiResponse<List<GetEventPostSync200ResponseInner>> GetEventPostSyncWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPreNetworkSync200ResponseInner&gt;</returns>
        List<GetEventPreNetworkSync200ResponseInner> GetEventPreNetworkSync(int operationIndex = 0);

        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPreNetworkSync200ResponseInner&gt;</returns>
        ApiResponse<List<GetEventPreNetworkSync200ResponseInner>> GetEventPreNetworkSyncWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Subscribe to the PreSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPreSync200ResponseInner&gt;</returns>
        List<GetEventPreSync200ResponseInner> GetEventPreSync(int operationIndex = 0);

        /// <summary>
        /// Subscribe to the PreSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPreSync200ResponseInner&gt;</returns>
        ApiResponse<List<GetEventPreSync200ResponseInner>> GetEventPreSyncWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventCustomMessageReceive200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEventCustomMessageReceive200ResponseInner>> GetEventCustomMessageReceiveAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventCustomMessageReceive200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEventCustomMessageReceive200ResponseInner>>> GetEventCustomMessageReceiveWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Subscribe to the LogBroadcastEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventLogBroadcast200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEventLogBroadcast200ResponseInner>> GetEventLogBroadcastAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to the LogBroadcastEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventLogBroadcast200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEventLogBroadcast200ResponseInner>>> GetEventLogBroadcastWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPostNetworkSync200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEventPostNetworkSync200ResponseInner>> GetEventPostNetworkSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPostNetworkSync200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEventPostNetworkSync200ResponseInner>>> GetEventPostNetworkSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Subscribe to the PostSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPostSync200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEventPostSync200ResponseInner>> GetEventPostSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to the PostSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPostSync200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEventPostSync200ResponseInner>>> GetEventPostSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPreNetworkSync200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEventPreNetworkSync200ResponseInner>> GetEventPreNetworkSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPreNetworkSync200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEventPreNetworkSync200ResponseInner>>> GetEventPreNetworkSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Subscribe to the PreSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPreSync200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEventPreSync200ResponseInner>> GetEventPreSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe to the PreSyncEvent
        /// </summary>
        /// <remarks>
        /// Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPreSync200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEventPreSync200ResponseInner>>> GetEventPreSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                new HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient client, HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient asyncClient, HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventCustomMessageReceive200ResponseInner&gt;</returns>
        public List<GetEventCustomMessageReceive200ResponseInner> GetEventCustomMessageReceive(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventCustomMessageReceive200ResponseInner>> localVarResponse = GetEventCustomMessageReceiveWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventCustomMessageReceive200ResponseInner&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventCustomMessageReceive200ResponseInner>> GetEventCustomMessageReceiveWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventCustomMessageReceive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEventCustomMessageReceive200ResponseInner>>("/event/custom-message-receive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventCustomMessageReceive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventCustomMessageReceive200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEventCustomMessageReceive200ResponseInner>> GetEventCustomMessageReceiveAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventCustomMessageReceive200ResponseInner>> localVarResponse = await GetEventCustomMessageReceiveWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the CustomMessageReceiveEvent Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventCustomMessageReceive200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventCustomMessageReceive200ResponseInner>>> GetEventCustomMessageReceiveWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventCustomMessageReceive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEventCustomMessageReceive200ResponseInner>>("/event/custom-message-receive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventCustomMessageReceive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the LogBroadcastEvent Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventLogBroadcast200ResponseInner&gt;</returns>
        public List<GetEventLogBroadcast200ResponseInner> GetEventLogBroadcast(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventLogBroadcast200ResponseInner>> localVarResponse = GetEventLogBroadcastWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the LogBroadcastEvent Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventLogBroadcast200ResponseInner&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventLogBroadcast200ResponseInner>> GetEventLogBroadcastWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventLogBroadcast";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEventLogBroadcast200ResponseInner>>("/event/log-broadcast", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventLogBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the LogBroadcastEvent Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventLogBroadcast200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEventLogBroadcast200ResponseInner>> GetEventLogBroadcastAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventLogBroadcast200ResponseInner>> localVarResponse = await GetEventLogBroadcastWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the LogBroadcastEvent Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventLogBroadcast200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventLogBroadcast200ResponseInner>>> GetEventLogBroadcastWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventLogBroadcast";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEventLogBroadcast200ResponseInner>>("/event/log-broadcast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventLogBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPostNetworkSync200ResponseInner&gt;</returns>
        public List<GetEventPostNetworkSync200ResponseInner> GetEventPostNetworkSync(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostNetworkSync200ResponseInner>> localVarResponse = GetEventPostNetworkSyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPostNetworkSync200ResponseInner&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostNetworkSync200ResponseInner>> GetEventPostNetworkSyncWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPostNetworkSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEventPostNetworkSync200ResponseInner>>("/event/post-network-sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPostNetworkSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPostNetworkSync200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEventPostNetworkSync200ResponseInner>> GetEventPostNetworkSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostNetworkSync200ResponseInner>> localVarResponse = await GetEventPostNetworkSyncWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PostNetworkSyncEvent Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPostNetworkSync200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostNetworkSync200ResponseInner>>> GetEventPostNetworkSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPostNetworkSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEventPostNetworkSync200ResponseInner>>("/event/post-network-sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPostNetworkSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PostSyncEvent Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPostSync200ResponseInner&gt;</returns>
        public List<GetEventPostSync200ResponseInner> GetEventPostSync(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostSync200ResponseInner>> localVarResponse = GetEventPostSyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PostSyncEvent Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPostSync200ResponseInner&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostSync200ResponseInner>> GetEventPostSyncWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPostSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEventPostSync200ResponseInner>>("/event/post-sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPostSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PostSyncEvent Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPostSync200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEventPostSync200ResponseInner>> GetEventPostSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostSync200ResponseInner>> localVarResponse = await GetEventPostSyncWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PostSyncEvent Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPostSync200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPostSync200ResponseInner>>> GetEventPostSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPostSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEventPostSync200ResponseInner>>("/event/post-sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPostSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPreNetworkSync200ResponseInner&gt;</returns>
        public List<GetEventPreNetworkSync200ResponseInner> GetEventPreNetworkSync(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreNetworkSync200ResponseInner>> localVarResponse = GetEventPreNetworkSyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPreNetworkSync200ResponseInner&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreNetworkSync200ResponseInner>> GetEventPreNetworkSyncWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPreNetworkSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEventPreNetworkSync200ResponseInner>>("/event/pre-network-sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPreNetworkSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPreNetworkSync200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEventPreNetworkSync200ResponseInner>> GetEventPreNetworkSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreNetworkSync200ResponseInner>> localVarResponse = await GetEventPreNetworkSyncWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PreNetworkSyncEvent Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPreNetworkSync200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreNetworkSync200ResponseInner>>> GetEventPreNetworkSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPreNetworkSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEventPreNetworkSync200ResponseInner>>("/event/pre-network-sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPreNetworkSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PreSyncEvent Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEventPreSync200ResponseInner&gt;</returns>
        public List<GetEventPreSync200ResponseInner> GetEventPreSync(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreSync200ResponseInner>> localVarResponse = GetEventPreSyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PreSyncEvent Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEventPreSync200ResponseInner&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreSync200ResponseInner>> GetEventPreSyncWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPreSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEventPreSync200ResponseInner>>("/event/pre-sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPreSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe to the PreSyncEvent Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEventPreSync200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEventPreSync200ResponseInner>> GetEventPreSyncAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreSync200ResponseInner>> localVarResponse = await GetEventPreSyncWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to the PreSyncEvent Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEventPreSync200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<GetEventPreSync200ResponseInner>>> GetEventPreSyncWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventsApi.GetEventPreSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEventPreSync200ResponseInner>>("/event/pre-sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventPreSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
