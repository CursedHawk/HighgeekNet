/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HighgeekNet.OpenApi.LuckPermsApi.Client;
using HighgeekNet.OpenApi.LuckPermsApi.Model;

namespace HighgeekNet.OpenApi.LuckPermsApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Query actions
        /// </summary>
        /// <remarks>
        /// Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetActions200Response</returns>
        GetActions200Response GetActions(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0);

        /// <summary>
        /// Query actions
        /// </summary>
        /// <remarks>
        /// Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetActions200Response</returns>
        ApiResponse<GetActions200Response> GetActionsWithHttpInfo(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0);
        /// <summary>
        /// Submit a new action
        /// </summary>
        /// <remarks>
        /// Submit a new action to the action logger.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubmitAction(Model.Action? action = default(Model.Action?), int operationIndex = 0);

        /// <summary>
        /// Submit a new action
        /// </summary>
        /// <remarks>
        /// Submit a new action to the action logger.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitActionWithHttpInfo(Model.Action? action = default(Model.Action?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Query actions
        /// </summary>
        /// <remarks>
        /// Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetActions200Response</returns>
        System.Threading.Tasks.Task<GetActions200Response> GetActionsAsync(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Query actions
        /// </summary>
        /// <remarks>
        /// Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetActions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetActions200Response>> GetActionsWithHttpInfoAsync(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Submit a new action
        /// </summary>
        /// <remarks>
        /// Submit a new action to the action logger.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitActionAsync(Model.Action? action = default(Model.Action?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Submit a new action
        /// </summary>
        /// <remarks>
        /// Submit a new action to the action logger.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitActionWithHttpInfoAsync(Model.Action? action = default(Model.Action?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActionsApi : IActionsApiSync, IActionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActionsApi : IActionsApi
    {
        private HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActionsApi(string basePath)
        {
            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                new HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActionsApi(HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ActionsApi(HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient client, HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient asyncClient, HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Query actions Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetActions200Response</returns>
        public GetActions200Response GetActions(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetActions200Response> localVarResponse = GetActionsWithHttpInfo(pageSize, pageNumber, source, user, group, track, search);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query actions Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetActions200Response</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetActions200Response> GetActionsWithHttpInfo(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (track != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "track", track));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "ActionsApi.GetActions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetActions200Response>("/action", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query actions Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetActions200Response</returns>
        public async System.Threading.Tasks.Task<GetActions200Response> GetActionsAsync(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetActions200Response> localVarResponse = await GetActionsWithHttpInfoAsync(pageSize, pageNumber, source, user, group, track, search, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query actions Query actions from the action logger.  If pageSize or pageNumber are specified, both must be specified. If neither are specified, no pagination will be used and all results will be returned. 
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of actions to return on each page (optional)</param>
        /// <param name="pageNumber">The page to return (optional)</param>
        /// <param name="source">Filter by source user unique id (optional)</param>
        /// <param name="user">Filter by target user unique id (optional)</param>
        /// <param name="group">Filter by target group name (optional)</param>
        /// <param name="track">Filter by target track name (optional)</param>
        /// <param name="search">Filter by search value in source name, target name or description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetActions200Response)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetActions200Response>> GetActionsWithHttpInfoAsync(int? pageSize = default(int?), int? pageNumber = default(int?), string? source = default(string?), string? user = default(string?), string? group = default(string?), string? track = default(string?), string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (track != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "track", track));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "ActionsApi.GetActions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetActions200Response>("/action", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a new action Submit a new action to the action logger.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubmitAction(Model.Action? action = default(Model.Action?), int operationIndex = 0)
        {
            SubmitActionWithHttpInfo(action);
        }

        /// <summary>
        /// Submit a new action Submit a new action to the action logger.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> SubmitActionWithHttpInfo(Model.Action? action = default(Model.Action?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = action;

            localVarRequestOptions.Operation = "ActionsApi.SubmitAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/action", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit a new action Submit a new action to the action logger.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitActionAsync(Model.Action? action = default(Model.Action?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SubmitActionWithHttpInfoAsync(action, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Submit a new action Submit a new action to the action logger.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> SubmitActionWithHttpInfoAsync(Model.Action? action = default(Model.Action?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = action;

            localVarRequestOptions.Operation = "ActionsApi.SubmitAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/action", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
