/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HighgeekNet.OpenApi.LuckPermsApi.Client;
using HighgeekNet.OpenApi.LuckPermsApi.Model;

namespace HighgeekNet.OpenApi.LuckPermsApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITracksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new track
        /// </summary>
        /// <remarks>
        /// Create a new track.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Track</returns>
        Track CreateTrack(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0);

        /// <summary>
        /// Create a new track
        /// </summary>
        /// <remarks>
        /// Create a new track.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Track</returns>
        ApiResponse<Track> CreateTrackWithHttpInfo(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0);
        /// <summary>
        /// Delete a track
        /// </summary>
        /// <remarks>
        /// Delete a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTrack(string trackName, int operationIndex = 0);

        /// <summary>
        /// Delete a track
        /// </summary>
        /// <remarks>
        /// Delete a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTrackWithHttpInfo(string trackName, int operationIndex = 0);
        /// <summary>
        /// Get a tracks data
        /// </summary>
        /// <remarks>
        /// Get a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Track</returns>
        Track GetTrack(string trackName, int operationIndex = 0);

        /// <summary>
        /// Get a tracks data
        /// </summary>
        /// <remarks>
        /// Get a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Track</returns>
        ApiResponse<Track> GetTrackWithHttpInfo(string trackName, int operationIndex = 0);
        /// <summary>
        /// Get all existing tracks
        /// </summary>
        /// <remarks>
        /// Get all known tracks
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTracks(int operationIndex = 0);

        /// <summary>
        /// Get all existing tracks
        /// </summary>
        /// <remarks>
        /// Get all known tracks
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTracksWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a track
        /// </summary>
        /// <remarks>
        /// Update a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PatchTrack(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a track
        /// </summary>
        /// <remarks>
        /// Update a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchTrackWithHttpInfo(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITracksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new track
        /// </summary>
        /// <remarks>
        /// Create a new track.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Track</returns>
        System.Threading.Tasks.Task<Track> CreateTrackAsync(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new track
        /// </summary>
        /// <remarks>
        /// Create a new track.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Track)</returns>
        System.Threading.Tasks.Task<ApiResponse<Track>> CreateTrackWithHttpInfoAsync(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a track
        /// </summary>
        /// <remarks>
        /// Delete a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTrackAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a track
        /// </summary>
        /// <remarks>
        /// Delete a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTrackWithHttpInfoAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a tracks data
        /// </summary>
        /// <remarks>
        /// Get a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Track</returns>
        System.Threading.Tasks.Task<Track> GetTrackAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a tracks data
        /// </summary>
        /// <remarks>
        /// Get a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Track)</returns>
        System.Threading.Tasks.Task<ApiResponse<Track>> GetTrackWithHttpInfoAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get all existing tracks
        /// </summary>
        /// <remarks>
        /// Get all known tracks
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTracksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get all existing tracks
        /// </summary>
        /// <remarks>
        /// Get all known tracks
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTracksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a track
        /// </summary>
        /// <remarks>
        /// Update a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchTrackAsync(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a track
        /// </summary>
        /// <remarks>
        /// Update a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchTrackWithHttpInfoAsync(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITracksApi : ITracksApiSync, ITracksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TracksApi : ITracksApi
    {
        private HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TracksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TracksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TracksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TracksApi(string basePath)
        {
            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                new HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TracksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TracksApi(HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TracksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TracksApi(HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient client, HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient asyncClient, HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new track Create a new track.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Track</returns>
        public Track CreateTrack(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track> localVarResponse = CreateTrackWithHttpInfo(newTrack);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new track Create a new track.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Track</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track> CreateTrackWithHttpInfo(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newTrack;

            localVarRequestOptions.Operation = "TracksApi.CreateTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Track>("/track", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new track Create a new track.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Track</returns>
        public async System.Threading.Tasks.Task<Track> CreateTrackAsync(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track> localVarResponse = await CreateTrackWithHttpInfoAsync(newTrack, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new track Create a new track.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newTrack"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Track)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track>> CreateTrackWithHttpInfoAsync(NewTrack? newTrack = default(NewTrack?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newTrack;

            localVarRequestOptions.Operation = "TracksApi.CreateTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Track>("/track", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a track Delete a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTrack(string trackName, int operationIndex = 0)
        {
            DeleteTrackWithHttpInfo(trackName);
        }

        /// <summary>
        /// Delete a track Delete a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> DeleteTrackWithHttpInfo(string trackName, int operationIndex = 0)
        {
            // verify the required parameter 'trackName' is set
            if (trackName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'trackName' when calling TracksApi->DeleteTrack");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(trackName)); // path parameter

            localVarRequestOptions.Operation = "TracksApi.DeleteTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/track/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a track Delete a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTrackAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteTrackWithHttpInfoAsync(trackName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a track Delete a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> DeleteTrackWithHttpInfoAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackName' is set
            if (trackName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'trackName' when calling TracksApi->DeleteTrack");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(trackName)); // path parameter

            localVarRequestOptions.Operation = "TracksApi.DeleteTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/track/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a tracks data Get a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Track</returns>
        public Track GetTrack(string trackName, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track> localVarResponse = GetTrackWithHttpInfo(trackName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a tracks data Get a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Track</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track> GetTrackWithHttpInfo(string trackName, int operationIndex = 0)
        {
            // verify the required parameter 'trackName' is set
            if (trackName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'trackName' when calling TracksApi->GetTrack");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(trackName)); // path parameter

            localVarRequestOptions.Operation = "TracksApi.GetTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Track>("/track/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a tracks data Get a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Track</returns>
        public async System.Threading.Tasks.Task<Track> GetTrackAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track> localVarResponse = await GetTrackWithHttpInfoAsync(trackName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a tracks data Get a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Track)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Track>> GetTrackWithHttpInfoAsync(string trackName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackName' is set
            if (trackName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'trackName' when calling TracksApi->GetTrack");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(trackName)); // path parameter

            localVarRequestOptions.Operation = "TracksApi.GetTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Track>("/track/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all existing tracks Get all known tracks
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTracks(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>> localVarResponse = GetTracksWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all existing tracks Get all known tracks
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>> GetTracksWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TracksApi.GetTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/track", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all existing tracks Get all known tracks
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTracksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>> localVarResponse = await GetTracksWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all existing tracks Get all known tracks
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<string>>> GetTracksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TracksApi.GetTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/track", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a track Update a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PatchTrack(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0)
        {
            PatchTrackWithHttpInfo(trackName, patchTrackRequest);
        }

        /// <summary>
        /// Update a track Update a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> PatchTrackWithHttpInfo(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'trackName' is set
            if (trackName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'trackName' when calling TracksApi->PatchTrack");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(trackName)); // path parameter
            localVarRequestOptions.Data = patchTrackRequest;

            localVarRequestOptions.Operation = "TracksApi.PatchTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/track/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a track Update a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchTrackAsync(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PatchTrackWithHttpInfoAsync(trackName, patchTrackRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a track Update a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackName">A track name</param>
        /// <param name="patchTrackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> PatchTrackWithHttpInfoAsync(string trackName, PatchTrackRequest? patchTrackRequest = default(PatchTrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackName' is set
            if (trackName == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'trackName' when calling TracksApi->PatchTrack");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackName", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(trackName)); // path parameter
            localVarRequestOptions.Data = patchTrackRequest;

            localVarRequestOptions.Operation = "TracksApi.PatchTrack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/track/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
