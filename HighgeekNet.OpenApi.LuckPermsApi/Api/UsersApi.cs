/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HighgeekNet.OpenApi.LuckPermsApi.Client;
using HighgeekNet.OpenApi.LuckPermsApi.Model;

namespace HighgeekNet.OpenApi.LuckPermsApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a node to a user
        /// </summary>
        /// <remarks>
        /// Add a single node to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        List<Node> AddUserNode(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0);

        /// <summary>
        /// Add a node to a user
        /// </summary>
        /// <remarks>
        /// Add a single node to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        ApiResponse<List<Node>> AddUserNodeWithHttpInfo(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0);
        /// <summary>
        /// Add multiple nodes to a user
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        List<Node> AddUserNodes(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);

        /// <summary>
        /// Add multiple nodes to a user
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        ApiResponse<List<Node>> AddUserNodesWithHttpInfo(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);
        /// <summary>
        /// Remove nodes from a user
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ClearUserNodes(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);

        /// <summary>
        /// Remove nodes from a user
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearUserNodesWithHttpInfo(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerSaveResult</returns>
        PlayerSaveResult CreateUser(NewUser? newUser = default(NewUser?), int operationIndex = 0);

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerSaveResult</returns>
        ApiResponse<PlayerSaveResult> CreateUserWithHttpInfo(NewUser? newUser = default(NewUser?), int operationIndex = 0);
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUser(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get a users data
        /// </summary>
        /// <remarks>
        /// Get a user by unique id (UUID).
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetUser(Guid uniqueId, int operationIndex = 0);

        /// <summary>
        /// Get a users data
        /// </summary>
        /// <remarks>
        /// Get a user by unique id (UUID).
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(Guid uniqueId, int operationIndex = 0);
        /// <summary>
        /// Search for a user with the given username or unique id
        /// </summary>
        /// <remarks>
        /// Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserLookup200Response</returns>
        GetUserLookup200Response GetUserLookup(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Search for a user with the given username or unique id
        /// </summary>
        /// <remarks>
        /// Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserLookup200Response</returns>
        ApiResponse<GetUserLookup200Response> GetUserLookupWithHttpInfo(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a users metadata
        /// </summary>
        /// <remarks>
        /// Get a users metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Metadata</returns>
        Metadata GetUserMeta(Guid uniqueId, int operationIndex = 0);

        /// <summary>
        /// Get a users metadata
        /// </summary>
        /// <remarks>
        /// Get a users metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Metadata</returns>
        ApiResponse<Metadata> GetUserMetaWithHttpInfo(Guid uniqueId, int operationIndex = 0);
        /// <summary>
        /// Get a users nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a users nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        List<Node> GetUserNodes(Guid uniqueId, int operationIndex = 0);

        /// <summary>
        /// Get a users nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a users nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        ApiResponse<List<Node>> GetUserNodesWithHttpInfo(Guid uniqueId, int operationIndex = 0);
        /// <summary>
        /// Run a permission check against a user
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        PermissionCheckResult GetUserPermissionCheck(Guid uniqueId, string permission, int operationIndex = 0);

        /// <summary>
        /// Run a permission check against a user
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        ApiResponse<PermissionCheckResult> GetUserPermissionCheckWithHttpInfo(Guid uniqueId, string permission, int operationIndex = 0);
        /// <summary>
        /// Search for users with given nodes
        /// </summary>
        /// <remarks>
        /// Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSearchResult&gt;</returns>
        List<UserSearchResult> GetUserSearch(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for users with given nodes
        /// </summary>
        /// <remarks>
        /// Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSearchResult&gt;</returns>
        ApiResponse<List<UserSearchResult>> GetUserSearchWithHttpInfo(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get all existing users
        /// </summary>
        /// <remarks>
        /// Returns an array of all known users.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> GetUsers(int operationIndex = 0);

        /// <summary>
        /// Get all existing users
        /// </summary>
        /// <remarks>
        /// Returns an array of all known users.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> GetUsersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a users data
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s data
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PatchUser(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a users data
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s data
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchUserWithHttpInfo(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0);
        /// <summary>
        /// Run a permission check against a user with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        PermissionCheckResult PostUserPermissionCheck(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0);

        /// <summary>
        /// Run a permission check against a user with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        ApiResponse<PermissionCheckResult> PostUserPermissionCheckWithHttpInfo(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0);
        /// <summary>
        /// Replace (set) a users nodes
        /// </summary>
        /// <remarks>
        /// Override the users nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SetUserNodes(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);

        /// <summary>
        /// Replace (set) a users nodes
        /// </summary>
        /// <remarks>
        /// Override the users nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUserNodesWithHttpInfo(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0);
        /// <summary>
        /// Demote a user along a track
        /// </summary>
        /// <remarks>
        /// Demote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DemotionResult</returns>
        DemotionResult UserDemote(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0);

        /// <summary>
        /// Demote a user along a track
        /// </summary>
        /// <remarks>
        /// Demote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DemotionResult</returns>
        ApiResponse<DemotionResult> UserDemoteWithHttpInfo(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0);
        /// <summary>
        /// Promote a user along a track
        /// </summary>
        /// <remarks>
        /// Promote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionResult</returns>
        PromotionResult UserPromote(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0);

        /// <summary>
        /// Promote a user along a track
        /// </summary>
        /// <remarks>
        /// Promote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionResult</returns>
        ApiResponse<PromotionResult> UserPromoteWithHttpInfo(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a node to a user
        /// </summary>
        /// <remarks>
        /// Add a single node to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        System.Threading.Tasks.Task<List<Node>> AddUserNodeAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a node to a user
        /// </summary>
        /// <remarks>
        /// Add a single node to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Node>>> AddUserNodeWithHttpInfoAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add multiple nodes to a user
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        System.Threading.Tasks.Task<List<Node>> AddUserNodesAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add multiple nodes to a user
        /// </summary>
        /// <remarks>
        /// Add multiple nodes to the user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Node>>> AddUserNodesWithHttpInfoAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove nodes from a user
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearUserNodesAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove nodes from a user
        /// </summary>
        /// <remarks>
        /// Delete some or all of the nodes from a user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearUserNodesWithHttpInfoAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerSaveResult</returns>
        System.Threading.Tasks.Task<PlayerSaveResult> CreateUserAsync(NewUser? newUser = default(NewUser?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerSaveResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerSaveResult>> CreateUserWithHttpInfoAsync(NewUser? newUser = default(NewUser?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a users data
        /// </summary>
        /// <remarks>
        /// Get a user by unique id (UUID).
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a users data
        /// </summary>
        /// <remarks>
        /// Get a user by unique id (UUID).
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserWithHttpInfoAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search for a user with the given username or unique id
        /// </summary>
        /// <remarks>
        /// Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserLookup200Response</returns>
        System.Threading.Tasks.Task<GetUserLookup200Response> GetUserLookupAsync(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search for a user with the given username or unique id
        /// </summary>
        /// <remarks>
        /// Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserLookup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserLookup200Response>> GetUserLookupWithHttpInfoAsync(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a users metadata
        /// </summary>
        /// <remarks>
        /// Get a users metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Metadata</returns>
        System.Threading.Tasks.Task<Metadata> GetUserMetaAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a users metadata
        /// </summary>
        /// <remarks>
        /// Get a users metadata
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Metadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<Metadata>> GetUserMetaWithHttpInfoAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a users nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a users nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        System.Threading.Tasks.Task<List<Node>> GetUserNodesAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a users nodes (permissions data)
        /// </summary>
        /// <remarks>
        /// Get a users nodes.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Node>>> GetUserNodesWithHttpInfoAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Run a permission check against a user
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        System.Threading.Tasks.Task<PermissionCheckResult> GetUserPermissionCheckAsync(Guid uniqueId, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Run a permission check against a user
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCheckResult>> GetUserPermissionCheckWithHttpInfoAsync(Guid uniqueId, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search for users with given nodes
        /// </summary>
        /// <remarks>
        /// Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<UserSearchResult>> GetUserSearchAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search for users with given nodes
        /// </summary>
        /// <remarks>
        /// Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSearchResult>>> GetUserSearchWithHttpInfoAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get all existing users
        /// </summary>
        /// <remarks>
        /// Returns an array of all known users.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> GetUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get all existing users
        /// </summary>
        /// <remarks>
        /// Returns an array of all known users.
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> GetUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a users data
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s data
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchUserAsync(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a users data
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s data
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchUserWithHttpInfoAsync(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Run a permission check against a user with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        System.Threading.Tasks.Task<PermissionCheckResult> PostUserPermissionCheckAsync(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Run a permission check against a user with custom query options
        /// </summary>
        /// <remarks>
        /// Run a permission check against a user with custom query options
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCheckResult>> PostUserPermissionCheckWithHttpInfoAsync(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Replace (set) a users nodes
        /// </summary>
        /// <remarks>
        /// Override the users nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetUserNodesAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Replace (set) a users nodes
        /// </summary>
        /// <remarks>
        /// Override the users nodes
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetUserNodesWithHttpInfoAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Demote a user along a track
        /// </summary>
        /// <remarks>
        /// Demote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemotionResult</returns>
        System.Threading.Tasks.Task<DemotionResult> UserDemoteAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Demote a user along a track
        /// </summary>
        /// <remarks>
        /// Demote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemotionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemotionResult>> UserDemoteWithHttpInfoAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Promote a user along a track
        /// </summary>
        /// <remarks>
        /// Promote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionResult</returns>
        System.Threading.Tasks.Task<PromotionResult> UserPromoteAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Promote a user along a track
        /// </summary>
        /// <remarks>
        /// Promote a user along a track
        /// </remarks>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionResult>> UserPromoteWithHttpInfoAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                new HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.MergeConfigurations(
                HighgeekNet.OpenApi.LuckPermsApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient client, HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient asyncClient, HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HighgeekNet.OpenApi.LuckPermsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a node to a user Add a single node to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        public List<Node> AddUserNode(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = AddUserNodeWithHttpInfo(uniqueId, temporaryNodeMergeStrategy, newNode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a node to a user Add a single node to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> AddUserNodeWithHttpInfo(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.AddUserNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Node>>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a node to a user Add a single node to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        public async System.Threading.Tasks.Task<List<Node>> AddUserNodeAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = await AddUserNodeWithHttpInfoAsync(uniqueId, temporaryNodeMergeStrategy, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a node to a user Add a single node to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>>> AddUserNodeWithHttpInfoAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), NewNode? newNode = default(NewNode?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.AddUserNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Node>>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add multiple nodes to a user Add multiple nodes to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        public List<Node> AddUserNodes(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = AddUserNodesWithHttpInfo(uniqueId, temporaryNodeMergeStrategy, newNode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add multiple nodes to a user Add multiple nodes to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> AddUserNodesWithHttpInfo(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.AddUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<Node>>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add multiple nodes to a user Add multiple nodes to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        public async System.Threading.Tasks.Task<List<Node>> AddUserNodesAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = await AddUserNodesWithHttpInfoAsync(uniqueId, temporaryNodeMergeStrategy, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add multiple nodes to a user Add multiple nodes to the user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="temporaryNodeMergeStrategy">The node merge strategy (optional)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>>> AddUserNodesWithHttpInfoAsync(Guid uniqueId, TemporaryNodeMergeStrategy? temporaryNodeMergeStrategy = default(TemporaryNodeMergeStrategy?), List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            if (temporaryNodeMergeStrategy != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "temporaryNodeMergeStrategy", temporaryNodeMergeStrategy));
            }
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.AddUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<List<Node>>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove nodes from a user Delete some or all of the nodes from a user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ClearUserNodes(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            ClearUserNodesWithHttpInfo(uniqueId, newNode);
        }

        /// <summary>
        /// Remove nodes from a user Delete some or all of the nodes from a user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> ClearUserNodesWithHttpInfo(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.ClearUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove nodes from a user Delete some or all of the nodes from a user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearUserNodesAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ClearUserNodesWithHttpInfoAsync(uniqueId, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove nodes from a user Delete some or all of the nodes from a user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode">Specify the nodes to be deleted.  If the request body is empty, all nodes will be deleted. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> ClearUserNodesWithHttpInfoAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.ClearUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new user Create a new user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerSaveResult</returns>
        public PlayerSaveResult CreateUser(NewUser? newUser = default(NewUser?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PlayerSaveResult> localVarResponse = CreateUserWithHttpInfo(newUser);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user Create a new user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerSaveResult</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PlayerSaveResult> CreateUserWithHttpInfo(NewUser? newUser = default(NewUser?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newUser;

            localVarRequestOptions.Operation = "UsersApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayerSaveResult>("/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new user Create a new user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerSaveResult</returns>
        public async System.Threading.Tasks.Task<PlayerSaveResult> CreateUserAsync(NewUser? newUser = default(NewUser?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PlayerSaveResult> localVarResponse = await CreateUserWithHttpInfoAsync(newUser, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user Create a new user.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUser"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerSaveResult)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PlayerSaveResult>> CreateUserWithHttpInfoAsync(NewUser? newUser = default(NewUser?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newUser;

            localVarRequestOptions.Operation = "UsersApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayerSaveResult>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUser(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0)
        {
            DeleteUserWithHttpInfo(uniqueId, playerDataOnly);
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> DeleteUserWithHttpInfo(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            if (playerDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "playerDataOnly", playerDataOnly));
            }

            localVarRequestOptions.Operation = "UsersApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/{uniqueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteUserWithHttpInfoAsync(uniqueId, playerDataOnly, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="playerDataOnly">if only player data should be deleted (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(Guid uniqueId, bool? playerDataOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            if (playerDataOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "playerDataOnly", playerDataOnly));
            }

            localVarRequestOptions.Operation = "UsersApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/{uniqueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a users data Get a user by unique id (UUID).
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetUser(Guid uniqueId, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(uniqueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a users data Get a user by unique id (UUID).
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<User> GetUserWithHttpInfo(Guid uniqueId, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/user/{uniqueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a users data Get a user by unique id (UUID).
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<User> localVarResponse = await GetUserWithHttpInfoAsync(uniqueId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a users data Get a user by unique id (UUID).
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<User>> GetUserWithHttpInfoAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/user/{uniqueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a user with the given username or unique id Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserLookup200Response</returns>
        public GetUserLookup200Response GetUserLookup(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetUserLookup200Response> localVarResponse = GetUserLookupWithHttpInfo(username, uniqueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a user with the given username or unique id Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserLookup200Response</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetUserLookup200Response> GetUserLookupWithHttpInfo(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (uniqueId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "uniqueId", uniqueId));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUserLookup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserLookup200Response>("/user/lookup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLookup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a user with the given username or unique id Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserLookup200Response</returns>
        public async System.Threading.Tasks.Task<GetUserLookup200Response> GetUserLookupAsync(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetUserLookup200Response> localVarResponse = await GetUserLookupWithHttpInfoAsync(username, uniqueId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a user with the given username or unique id Lookup the unique id or username of a user with the given username or unique id.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username to search for (optional)</param>
        /// <param name="uniqueId">The unique id to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserLookup200Response)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<GetUserLookup200Response>> GetUserLookupWithHttpInfoAsync(string? username = default(string?), Guid? uniqueId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (uniqueId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "uniqueId", uniqueId));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUserLookup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUserLookup200Response>("/user/lookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserLookup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a users metadata Get a users metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Metadata</returns>
        public Metadata GetUserMeta(Guid uniqueId, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata> localVarResponse = GetUserMetaWithHttpInfo(uniqueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a users metadata Get a users metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Metadata</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata> GetUserMetaWithHttpInfo(Guid uniqueId, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserMeta";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Metadata>("/user/{uniqueId}/meta", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserMeta", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a users metadata Get a users metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Metadata</returns>
        public async System.Threading.Tasks.Task<Metadata> GetUserMetaAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata> localVarResponse = await GetUserMetaWithHttpInfoAsync(uniqueId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a users metadata Get a users metadata
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Metadata)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Metadata>> GetUserMetaWithHttpInfoAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserMeta";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Metadata>("/user/{uniqueId}/meta", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserMeta", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a users nodes (permissions data) Get a users nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Node&gt;</returns>
        public List<Node> GetUserNodes(Guid uniqueId, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = GetUserNodesWithHttpInfo(uniqueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a users nodes (permissions data) Get a users nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Node&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> GetUserNodesWithHttpInfo(Guid uniqueId, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Node>>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a users nodes (permissions data) Get a users nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Node&gt;</returns>
        public async System.Threading.Tasks.Task<List<Node>> GetUserNodesAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>> localVarResponse = await GetUserNodesWithHttpInfoAsync(uniqueId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a users nodes (permissions data) Get a users nodes.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Node&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Node>>> GetUserNodesWithHttpInfoAsync(Guid uniqueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Node>>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a user Run a permission check against a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        public PermissionCheckResult GetUserPermissionCheck(Guid uniqueId, string permission, int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = GetUserPermissionCheckWithHttpInfo(uniqueId, permission);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a user Run a permission check against a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> GetUserPermissionCheckWithHttpInfo(Guid uniqueId, string permission, int operationIndex = 0)
        {
            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'permission' when calling UsersApi->GetUserPermissionCheck");
            }

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));

            localVarRequestOptions.Operation = "UsersApi.GetUserPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PermissionCheckResult>("/user/{uniqueId}/permission-check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a user Run a permission check against a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        public async System.Threading.Tasks.Task<PermissionCheckResult> GetUserPermissionCheckAsync(Guid uniqueId, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = await GetUserPermissionCheckWithHttpInfoAsync(uniqueId, permission, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a user Run a permission check against a user
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permission">The permission to check for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult>> GetUserPermissionCheckWithHttpInfoAsync(Guid uniqueId, string permission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'permission' is set
            if (permission == null)
            {
                throw new HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException(400, "Missing required parameter 'permission' when calling UsersApi->GetUserPermissionCheck");
            }


            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));

            localVarRequestOptions.Operation = "UsersApi.GetUserPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PermissionCheckResult>("/user/{uniqueId}/permission-check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for users with given nodes Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSearchResult&gt;</returns>
        public List<UserSearchResult> GetUserSearch(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<UserSearchResult>> localVarResponse = GetUserSearchWithHttpInfo(key, keyStartsWith, metaKey, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users with given nodes Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSearchResult&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<UserSearchResult>> GetUserSearchWithHttpInfo(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyStartsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "keyStartsWith", keyStartsWith));
            }
            if (metaKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "metaKey", metaKey));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUserSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserSearchResult>>("/user/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for users with given nodes Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSearchResult>> GetUserSearchAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<UserSearchResult>> localVarResponse = await GetUserSearchWithHttpInfoAsync(key, keyStartsWith, metaKey, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users with given nodes Search for users with given nodes.  You must specify one of the query parameters in the request.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Search for nodes with a key equal to (optional)</param>
        /// <param name="keyStartsWith">Search for nodes with a key starting with (optional)</param>
        /// <param name="metaKey">Search for meta nodes with a meta key equal to (optional)</param>
        /// <param name="type">Search for nodes with a type equal to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<UserSearchResult>>> GetUserSearchWithHttpInfoAsync(string? key = default(string?), string? keyStartsWith = default(string?), string? metaKey = default(string?), string? type = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyStartsWith != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "keyStartsWith", keyStartsWith));
            }
            if (metaKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "metaKey", metaKey));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUserSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserSearchResult>>("/user/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all existing users Returns an array of all known users.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> GetUsers(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Guid>> localVarResponse = GetUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all existing users Returns an array of all known users.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Guid>> GetUsersWithHttpInfo(int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Guid>>("/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all existing users Returns an array of all known users.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> GetUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Guid>> localVarResponse = await GetUsersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all existing users Returns an array of all known users.
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<List<Guid>>> GetUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Guid>>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a users data Update a user&#39;s data
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PatchUser(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0)
        {
            PatchUserWithHttpInfo(uniqueId, patchUserRequest);
        }

        /// <summary>
        /// Update a users data Update a user&#39;s data
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> PatchUserWithHttpInfo(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = patchUserRequest;

            localVarRequestOptions.Operation = "UsersApi.PatchUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/user/{uniqueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a users data Update a user&#39;s data
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchUserAsync(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PatchUserWithHttpInfoAsync(uniqueId, patchUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a users data Update a user&#39;s data
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> PatchUserWithHttpInfoAsync(Guid uniqueId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = patchUserRequest;

            localVarRequestOptions.Operation = "UsersApi.PatchUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/user/{uniqueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a user with custom query options Run a permission check against a user with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PermissionCheckResult</returns>
        public PermissionCheckResult PostUserPermissionCheck(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = PostUserPermissionCheckWithHttpInfo(uniqueId, permissionCheckRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a user with custom query options Run a permission check against a user with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PermissionCheckResult</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> PostUserPermissionCheckWithHttpInfo(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = permissionCheckRequest;

            localVarRequestOptions.Operation = "UsersApi.PostUserPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PermissionCheckResult>("/user/{uniqueId}/permission-check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUserPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a permission check against a user with custom query options Run a permission check against a user with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PermissionCheckResult</returns>
        public async System.Threading.Tasks.Task<PermissionCheckResult> PostUserPermissionCheckAsync(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult> localVarResponse = await PostUserPermissionCheckWithHttpInfoAsync(uniqueId, permissionCheckRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run a permission check against a user with custom query options Run a permission check against a user with custom query options
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="permissionCheckRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PermissionCheckResult)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PermissionCheckResult>> PostUserPermissionCheckWithHttpInfoAsync(Guid uniqueId, PermissionCheckRequest? permissionCheckRequest = default(PermissionCheckRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = permissionCheckRequest;

            localVarRequestOptions.Operation = "UsersApi.PostUserPermissionCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PermissionCheckResult>("/user/{uniqueId}/permission-check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUserPermissionCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace (set) a users nodes Override the users nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SetUserNodes(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            SetUserNodesWithHttpInfo(uniqueId, newNode);
        }

        /// <summary>
        /// Replace (set) a users nodes Override the users nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object> SetUserNodesWithHttpInfo(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.SetUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace (set) a users nodes Override the users nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetUserNodesAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await SetUserNodesWithHttpInfoAsync(uniqueId, newNode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Replace (set) a users nodes Override the users nodes
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="newNode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<Object>> SetUserNodesWithHttpInfoAsync(Guid uniqueId, List<NewNode>? newNode = default(List<NewNode>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = newNode;

            localVarRequestOptions.Operation = "UsersApi.SetUserNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/{uniqueId}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Demote a user along a track Demote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DemotionResult</returns>
        public DemotionResult UserDemote(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<DemotionResult> localVarResponse = UserDemoteWithHttpInfo(uniqueId, trackRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Demote a user along a track Demote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DemotionResult</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<DemotionResult> UserDemoteWithHttpInfo(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = trackRequest;

            localVarRequestOptions.Operation = "UsersApi.UserDemote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DemotionResult>("/user/{uniqueId}/demote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDemote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Demote a user along a track Demote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemotionResult</returns>
        public async System.Threading.Tasks.Task<DemotionResult> UserDemoteAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<DemotionResult> localVarResponse = await UserDemoteWithHttpInfoAsync(uniqueId, trackRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Demote a user along a track Demote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemotionResult)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<DemotionResult>> UserDemoteWithHttpInfoAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = trackRequest;

            localVarRequestOptions.Operation = "UsersApi.UserDemote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DemotionResult>("/user/{uniqueId}/demote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDemote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Promote a user along a track Promote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionResult</returns>
        public PromotionResult UserPromote(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PromotionResult> localVarResponse = UserPromoteWithHttpInfo(uniqueId, trackRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Promote a user along a track Promote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionResult</returns>
        public HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PromotionResult> UserPromoteWithHttpInfo(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0)
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = trackRequest;

            localVarRequestOptions.Operation = "UsersApi.UserPromote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PromotionResult>("/user/{uniqueId}/promote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserPromote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Promote a user along a track Promote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionResult</returns>
        public async System.Threading.Tasks.Task<PromotionResult> UserPromoteAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PromotionResult> localVarResponse = await UserPromoteWithHttpInfoAsync(uniqueId, trackRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Promote a user along a track Promote a user along a track
        /// </summary>
        /// <exception cref="HighgeekNet.OpenApi.LuckPermsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">A player unique id (UUID)</param>
        /// <param name="trackRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionResult)</returns>
        public async System.Threading.Tasks.Task<HighgeekNet.OpenApi.LuckPermsApi.Client.ApiResponse<PromotionResult>> UserPromoteWithHttpInfoAsync(Guid uniqueId, TrackRequest? trackRequest = default(TrackRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions localVarRequestOptions = new HighgeekNet.OpenApi.LuckPermsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uniqueId", HighgeekNet.OpenApi.LuckPermsApi.Client.ClientUtils.ParameterToString(uniqueId)); // path parameter
            localVarRequestOptions.Data = trackRequest;

            localVarRequestOptions.Operation = "UsersApi.UserPromote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PromotionResult>("/user/{uniqueId}/promote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserPromote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
