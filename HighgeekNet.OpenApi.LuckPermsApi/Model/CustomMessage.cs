/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// A custom message to send via the messaging service
    /// </summary>
    [DataContract(Name = "CustomMessage")]
    public partial class CustomMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomMessage" /> class.
        /// </summary>
        /// <param name="channelId">channelId (required).</param>
        /// <param name="payload">payload (required).</param>
        public CustomMessage(string channelId = default(string), string payload = default(string))
        {
            // to ensure "channelId" is required (not null)
            if (channelId == null)
            {
                throw new ArgumentNullException("channelId is a required property for CustomMessage and cannot be null");
            }
            this.ChannelId = channelId;
            // to ensure "payload" is required (not null)
            if (payload == null)
            {
                throw new ArgumentNullException("payload is a required property for CustomMessage and cannot be null");
            }
            this.Payload = payload;
        }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        /*
        <example>superranks:notifications</example>
        */
        [DataMember(Name = "channelId", IsRequired = true, EmitDefaultValue = true)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        /*
        <example>custom payload message goes here</example>
        */
        [DataMember(Name = "payload", IsRequired = true, EmitDefaultValue = true)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomMessage {\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ChannelId (string) minLength
            if (this.ChannelId != null && this.ChannelId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ChannelId, length must be greater than 1.", new [] { "ChannelId" });
            }

            // Payload (string) minLength
            if (this.Payload != null && this.Payload.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Payload, length must be greater than 1.", new [] { "Payload" });
            }

            yield break;
        }
    }

}
