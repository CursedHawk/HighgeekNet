/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// Metadata about a user or group.
    /// </summary>
    [DataContract(Name = "Metadata")]
    public partial class Metadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Metadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata" /> class.
        /// </summary>
        /// <param name="meta">meta (required).</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="suffix">suffix.</param>
        /// <param name="primaryGroup">primaryGroup.</param>
        public Metadata(Object meta = default(Object), string prefix = default(string), string suffix = default(string), string primaryGroup = default(string))
        {
            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new ArgumentNullException("meta is a required property for Metadata and cannot be null");
            }
            this.Meta = meta;
            this.Prefix = prefix;
            this.Suffix = suffix;
            this.PrimaryGroup = primaryGroup;
        }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", IsRequired = true, EmitDefaultValue = true)]
        public Object Meta { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        /*
        <example>[Admin] </example>
        */
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Suffix
        /// </summary>
        /*
        <example> [the great]</example>
        */
        [DataMember(Name = "suffix", EmitDefaultValue = false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryGroup
        /// </summary>
        /*
        <example>default</example>
        */
        [DataMember(Name = "primaryGroup", EmitDefaultValue = false)]
        public string PrimaryGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Metadata {\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  PrimaryGroup: ").Append(PrimaryGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PrimaryGroup (string) minLength
            if (this.PrimaryGroup != null && this.PrimaryGroup.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PrimaryGroup, length must be greater than 1.", new [] { "PrimaryGroup" });
            }

            yield break;
        }
    }

}
