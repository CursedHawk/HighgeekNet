/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// Called after a request for synchronisation has been received via the messaging service, but before it has actually been completed
    /// </summary>
    [DataContract(Name = "PreNetworkSyncEvent")]
    public partial class PreNetworkSyncEvent : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public SyncType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreNetworkSyncEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreNetworkSyncEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreNetworkSyncEvent" /> class.
        /// </summary>
        /// <param name="syncId">A player unique id (UUID) (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="specificUserUniqueId">A player unique id (UUID).</param>
        public PreNetworkSyncEvent(Guid syncId = default(Guid), SyncType type = default(SyncType), Guid specificUserUniqueId = default(Guid))
        {
            this.SyncId = syncId;
            this.Type = type;
            this.SpecificUserUniqueId = specificUserUniqueId;
        }

        /// <summary>
        /// A player unique id (UUID)
        /// </summary>
        /// <value>A player unique id (UUID)</value>
        /*
        <example>c1d60c50-70b5-4722-8057-87767557e50d</example>
        */
        [DataMember(Name = "syncId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SyncId { get; set; }

        /// <summary>
        /// A player unique id (UUID)
        /// </summary>
        /// <value>A player unique id (UUID)</value>
        /*
        <example>c1d60c50-70b5-4722-8057-87767557e50d</example>
        */
        [DataMember(Name = "specificUserUniqueId", EmitDefaultValue = false)]
        public Guid SpecificUserUniqueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreNetworkSyncEvent {\n");
            sb.Append("  SyncId: ").Append(SyncId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SpecificUserUniqueId: ").Append(SpecificUserUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SyncId != null) {
                // SyncId (Guid) pattern
                Regex regexSyncId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
                if (!regexSyncId.Match(this.SyncId.ToString()).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SyncId, must match a pattern of " + regexSyncId, new [] { "SyncId" });
                }
            }

            if (this.SpecificUserUniqueId != null) {
                // SpecificUserUniqueId (Guid) pattern
                Regex regexSpecificUserUniqueId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
                if (!regexSpecificUserUniqueId.Match(this.SpecificUserUniqueId.ToString()).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecificUserUniqueId, must match a pattern of " + regexSpecificUserUniqueId, new [] { "SpecificUserUniqueId" });
                }
            }

            yield break;
        }
    }

}
