/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// The result of an operation to save data about a player
    /// </summary>
    [DataContract(Name = "PlayerSaveResult")]
    public partial class PlayerSaveResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerSaveResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerSaveResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerSaveResult" /> class.
        /// </summary>
        /// <param name="outcomes">if the app is healthy (required).</param>
        /// <param name="previousUsername">the previous username involved in the result (only applies for the username_updated outcome).</param>
        /// <param name="otherUniqueIds">the other unique ids involved in the result (only applies for the other_unique_ids_present_for_username outcome).</param>
        public PlayerSaveResult(List<PlayerSaveResultOutcome> outcomes = default(List<PlayerSaveResultOutcome>), string previousUsername = default(string), List<Guid> otherUniqueIds = default(List<Guid>))
        {
            // to ensure "outcomes" is required (not null)
            if (outcomes == null)
            {
                throw new ArgumentNullException("outcomes is a required property for PlayerSaveResult and cannot be null");
            }
            this.Outcomes = outcomes;
            this.PreviousUsername = previousUsername;
            this.OtherUniqueIds = otherUniqueIds;
        }

        /// <summary>
        /// if the app is healthy
        /// </summary>
        /// <value>if the app is healthy</value>
        [DataMember(Name = "outcomes", IsRequired = true, EmitDefaultValue = true)]
        public List<PlayerSaveResultOutcome> Outcomes { get; set; }

        /// <summary>
        /// the previous username involved in the result (only applies for the username_updated outcome)
        /// </summary>
        /// <value>the previous username involved in the result (only applies for the username_updated outcome)</value>
        /*
        <example>Luck</example>
        */
        [DataMember(Name = "previousUsername", EmitDefaultValue = false)]
        public string PreviousUsername { get; set; }

        /// <summary>
        /// the other unique ids involved in the result (only applies for the other_unique_ids_present_for_username outcome)
        /// </summary>
        /// <value>the other unique ids involved in the result (only applies for the other_unique_ids_present_for_username outcome)</value>
        [DataMember(Name = "otherUniqueIds", EmitDefaultValue = false)]
        public List<Guid> OtherUniqueIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerSaveResult {\n");
            sb.Append("  Outcomes: ").Append(Outcomes).Append("\n");
            sb.Append("  PreviousUsername: ").Append(PreviousUsername).Append("\n");
            sb.Append("  OtherUniqueIds: ").Append(OtherUniqueIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PreviousUsername (string) minLength
            if (this.PreviousUsername != null && this.PreviousUsername.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PreviousUsername, length must be greater than 1.", new [] { "PreviousUsername" });
            }

            yield break;
        }
    }

}
