/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// Represents a LuckPerms \&quot;node\&quot;.  Nodes encapsulate more than just permission assignments. Nodes are used to store data about inherited groups, as well as assigned prefixes, suffixes and meta values.
    /// </summary>
    [DataContract(Name = "NewNode")]
    public partial class NewNode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewNode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewNode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewNode" /> class.
        /// </summary>
        /// <param name="key">key (required).</param>
        /// <param name="value">value (default to true).</param>
        /// <param name="context">A set of context pairs..</param>
        /// <param name="expiry">The instant the node will expire, in epoch seconds..</param>
        public NewNode(string key = default(string), bool value = true, List<Context> context = default(List<Context>), int expiry = default(int))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for NewNode and cannot be null");
            }
            this.Key = key;
            this.Value = value;
            this.Context = context;
            this.Expiry = expiry;
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        /*
        <example>minecraft.command.ban</example>
        */
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public bool Value { get; set; }

        /// <summary>
        /// A set of context pairs.
        /// </summary>
        /// <value>A set of context pairs.</value>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public List<Context> Context { get; set; }

        /// <summary>
        /// The instant the node will expire, in epoch seconds.
        /// </summary>
        /// <value>The instant the node will expire, in epoch seconds.</value>
        /*
        <example>1658428395</example>
        */
        [DataMember(Name = "expiry", EmitDefaultValue = false)]
        public int Expiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NewNode {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) minLength
            if (this.Key != null && this.Key.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Key, length must be greater than 1.", new [] { "Key" });
            }

            yield break;
        }
    }

}
