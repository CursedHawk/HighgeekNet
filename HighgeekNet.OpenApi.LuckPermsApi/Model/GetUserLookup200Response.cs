/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// GetUserLookup200Response
    /// </summary>
    [DataContract(Name = "get_user_lookup_200_response")]
    public partial class GetUserLookup200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserLookup200Response" /> class.
        /// </summary>
        /// <param name="uniqueId">A player unique id (UUID).</param>
        /// <param name="username">username.</param>
        public GetUserLookup200Response(Guid uniqueId = default(Guid), string username = default(string))
        {
            this.UniqueId = uniqueId;
            this.Username = username;
        }

        /// <summary>
        /// A player unique id (UUID)
        /// </summary>
        /// <value>A player unique id (UUID)</value>
        /*
        <example>c1d60c50-70b5-4722-8057-87767557e50d</example>
        */
        [DataMember(Name = "uniqueId", EmitDefaultValue = false)]
        public Guid UniqueId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserLookup200Response {\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.UniqueId != null) {
                // UniqueId (Guid) pattern
                Regex regexUniqueId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
                if (!regexUniqueId.Match(this.UniqueId.ToString()).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UniqueId, must match a pattern of " + regexUniqueId, new [] { "UniqueId" });
                }
            }

            yield break;
        }
    }

}
