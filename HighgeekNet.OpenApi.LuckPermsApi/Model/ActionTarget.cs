/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// Who/what was the action performed on
    /// </summary>
    [DataContract(Name = "Action_target")]
    public partial class ActionTarget : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1,

            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 2,

            /// <summary>
            /// Enum Track for value: track
            /// </summary>
            [EnumMember(Value = "track")]
            Track = 3
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionTarget" /> class.
        /// </summary>
        /// <param name="uniqueId">A player unique id (UUID).</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        public ActionTarget(Guid uniqueId = default(Guid), string name = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ActionTarget and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.UniqueId = uniqueId;
        }

        /// <summary>
        /// A player unique id (UUID)
        /// </summary>
        /// <value>A player unique id (UUID)</value>
        /*
        <example>c1d60c50-70b5-4722-8057-87767557e50d</example>
        */
        [DataMember(Name = "uniqueId", EmitDefaultValue = false)]
        public Guid UniqueId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /*
        <example>Luck</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionTarget {\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.UniqueId != null) {
                // UniqueId (Guid) pattern
                Regex regexUniqueId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
                if (!regexUniqueId.Match(this.UniqueId.ToString()).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UniqueId, must match a pattern of " + regexUniqueId, new [] { "UniqueId" });
                }
            }

            yield break;
        }
    }

}
