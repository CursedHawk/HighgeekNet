/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// The health status of the app
    /// </summary>
    [DataContract(Name = "Health")]
    public partial class Health : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Health" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Health() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Health" /> class.
        /// </summary>
        /// <param name="varHealth">if the app is healthy (required).</param>
        /// <param name="details">extra information about the healthcheck result (required).</param>
        public Health(bool varHealth = default(bool), Object details = default(Object))
        {
            this.VarHealth = varHealth;
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new ArgumentNullException("details is a required property for Health and cannot be null");
            }
            this.Details = details;
        }

        /// <summary>
        /// if the app is healthy
        /// </summary>
        /// <value>if the app is healthy</value>
        [DataMember(Name = "health", IsRequired = true, EmitDefaultValue = true)]
        public bool VarHealth { get; set; }

        /// <summary>
        /// extra information about the healthcheck result
        /// </summary>
        /// <value>extra information about the healthcheck result</value>
        [DataMember(Name = "details", IsRequired = true, EmitDefaultValue = true)]
        public Object Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Health {\n");
            sb.Append("  VarHealth: ").Append(VarHealth).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
