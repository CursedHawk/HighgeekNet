/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// QueryOptions
    /// </summary>
    [DataContract(Name = "QueryOptions")]
    public partial class QueryOptions : IValidatableObject
    {
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Contextual for value: contextual
            /// </summary>
            [EnumMember(Value = "contextual")]
            Contextual = 1,

            /// <summary>
            /// Enum NonContextual for value: non_contextual
            /// </summary>
            [EnumMember(Value = "non_contextual")]
            NonContextual = 2
        }


        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Defines Flags
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlagsEnum
        {
            /// <summary>
            /// Enum ResolveInheritance for value: resolve_inheritance
            /// </summary>
            [EnumMember(Value = "resolve_inheritance")]
            ResolveInheritance = 1,

            /// <summary>
            /// Enum IncludeNodesWithoutServerContext for value: include_nodes_without_server_context
            /// </summary>
            [EnumMember(Value = "include_nodes_without_server_context")]
            IncludeNodesWithoutServerContext = 2,

            /// <summary>
            /// Enum IncludeNodesWithoutWorldContext for value: include_nodes_without_world_context
            /// </summary>
            [EnumMember(Value = "include_nodes_without_world_context")]
            IncludeNodesWithoutWorldContext = 3,

            /// <summary>
            /// Enum ApplyInheritanceNodesWithoutServerContext for value: apply_inheritance_nodes_without_server_context
            /// </summary>
            [EnumMember(Value = "apply_inheritance_nodes_without_server_context")]
            ApplyInheritanceNodesWithoutServerContext = 4,

            /// <summary>
            /// Enum ApplyInheritanceNodesWithoutWorldContext for value: apply_inheritance_nodes_without_world_context
            /// </summary>
            [EnumMember(Value = "apply_inheritance_nodes_without_world_context")]
            ApplyInheritanceNodesWithoutWorldContext = 5
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryOptions" /> class.
        /// </summary>
        /// <param name="mode">mode (default to ModeEnum.Contextual).</param>
        /// <param name="flags">flags.</param>
        /// <param name="contexts">A set of context pairs..</param>
        public QueryOptions(ModeEnum? mode = ModeEnum.Contextual, List<FlagsEnum> flags = default(List<FlagsEnum>), List<Context> contexts = default(List<Context>))
        {
            this.Mode = mode;
            this.Flags = flags;
            this.Contexts = contexts;
        }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name = "flags", EmitDefaultValue = false)]
        public List<QueryOptions.FlagsEnum> Flags { get; set; }

        /// <summary>
        /// A set of context pairs.
        /// </summary>
        /// <value>A set of context pairs.</value>
        [DataMember(Name = "contexts", EmitDefaultValue = false)]
        public List<Context> Contexts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryOptions {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
