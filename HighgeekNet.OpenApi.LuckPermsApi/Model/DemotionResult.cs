/*
 * LuckPerms REST API
 *
 * The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HighgeekNet.OpenApi.LuckPermsApi.Client.OpenAPIDateConverter;

namespace HighgeekNet.OpenApi.LuckPermsApi.Model
{
    /// <summary>
    /// The result of demoting a user.
    /// </summary>
    [DataContract(Name = "DemotionResult")]
    public partial class DemotionResult : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")]
            Success = 1,

            /// <summary>
            /// Enum RemovedFromFirstGroup for value: removed_from_first_group
            /// </summary>
            [EnumMember(Value = "removed_from_first_group")]
            RemovedFromFirstGroup = 2,

            /// <summary>
            /// Enum MalformedTrack for value: malformed_track
            /// </summary>
            [EnumMember(Value = "malformed_track")]
            MalformedTrack = 3,

            /// <summary>
            /// Enum NotOnTrack for value: not_on_track
            /// </summary>
            [EnumMember(Value = "not_on_track")]
            NotOnTrack = 4,

            /// <summary>
            /// Enum AmbiguousCall for value: ambiguous_call
            /// </summary>
            [EnumMember(Value = "ambiguous_call")]
            AmbiguousCall = 5,

            /// <summary>
            /// Enum UndefinedFailure for value: undefined_failure
            /// </summary>
            [EnumMember(Value = "undefined_failure")]
            UndefinedFailure = 6
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /*
        <example>success</example>
        */
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DemotionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DemotionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DemotionResult" /> class.
        /// </summary>
        /// <param name="success">success (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="groupFrom">groupFrom.</param>
        /// <param name="groupTo">groupTo.</param>
        public DemotionResult(bool success = default(bool), StatusEnum status = default(StatusEnum), string groupFrom = default(string), string groupTo = default(string))
        {
            this.Success = success;
            this.Status = status;
            this.GroupFrom = groupFrom;
            this.GroupTo = groupTo;
        }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets GroupFrom
        /// </summary>
        /*
        <example>vip</example>
        */
        [DataMember(Name = "groupFrom", EmitDefaultValue = false)]
        public string GroupFrom { get; set; }

        /// <summary>
        /// Gets or Sets GroupTo
        /// </summary>
        /*
        <example>mvp</example>
        */
        [DataMember(Name = "groupTo", EmitDefaultValue = false)]
        public string GroupTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DemotionResult {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GroupFrom: ").Append(GroupFrom).Append("\n");
            sb.Append("  GroupTo: ").Append(GroupTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GroupFrom (string) minLength
            if (this.GroupFrom != null && this.GroupFrom.Length < 1)
            {
                yield return new ValidationResult("Invalid value for GroupFrom, length must be greater than 1.", new [] { "GroupFrom" });
            }

            // GroupTo (string) minLength
            if (this.GroupTo != null && this.GroupTo.Length < 1)
            {
                yield return new ValidationResult("Invalid value for GroupTo, length must be greater than 1.", new [] { "GroupTo" });
            }

            yield break;
        }
    }

}
